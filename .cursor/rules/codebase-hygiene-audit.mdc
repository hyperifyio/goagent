---
description: "Repository-wide hygiene review that appends only new, non-duplicate, minimal, independent, DoD-ready tasks to FUTURE_CHECKLIST.md; each item is a single-line plain English checkbox"
alwaysApply: false
---

This rule instructs the assistant to review the entire repository for unused or 
unreachable code, accidental complexity, duplicate or overlapping 
implementations, inconsistent patterns, and architectural, operational, 
security, or reliability drift, and to propose preventive documentation tasks 
only when a real gap exists. The assistant must not modify code, configuration, 
documentation, or CI; it only produces a deduplicated Markdown checklist. The 
assistant thinks first and writes second so the final set of tasks reflects a 
coherent overall picture and does not contain conflicts or duplicates. New 
tasks are appended to FUTURE_CHECKLIST.md only.

Perform the work in two passes. First collect signals using static analysis, 
dependency graphs, builds, test runs, and coverage to locate dead symbols and 
files, orphaned assets, cycles, hotspots of complexity, copy-paste or parallel 
implementations, risky dependencies, and missing or inconsistent operational 
and security practices. Treat public interfaces, generated sources, declared 
deprecations within an active window, vendor or third-party code, and test-only 
utilities as special cases to avoid false positives. Second, reconcile and 
deduplicate the findings, cluster them by theme, and validate them with 
targeted builds and tests so that each recommended action can be executed 
independently without hidden coupling to other tasks.

Before writing any new checklist items, load and parse existing 
FUTURE_CHECKLIST.md and FEATURE_CHECKLIST.md if present. Treat an item as 
existing when there is an unchecked checkbox line beginning with `* [ ]` or 
`- [ ]`. Normalize candidate and existing items by lowercasing, trimming 
whitespace, collapsing multiple spaces, removing trailing punctuation and 
emoji, and compressing repeated file paths. Consider items duplicates if their 
normalized opening task clause matches or if they address the same primary 
files or symbols for the same issue class. If a duplicate is found, do not add 
a new item and do not modify existing files. Checked items never block analysis 
but must not be recreated.

Each new checklist entry must be exactly one physical line that starts with a 
Markdown checkbox marker `* [ ] ` followed by plain English sentences only. Do 
not use any additional formatting, labels, lists, bullets, tables, code fences, 
inline code, emojis, or special typography inside the line. Do not insert hard 
line breaks within an item; a single newline ends the item. Write clear prose 
that stands on its own without “see above” references. The sentence should 
express, in a compact way, the task, context and evidence, the smallest 
proposed change, affected scope, risks, effort, dependencies, a concise DoD 
summary aligned with the project’s Definition of Done, how to verify, how to 
rollback, and a traceability link to the canonical issue URL; use commas and 
semicolons to keep it readable while remaining on one line.

Preventive documentation tasks are created only when a real gap exists after 
inspecting the ./docs tree. If an existing Markdown document already explains 
the canonical approach, boundaries, layering and dependency rules, naming and 
layout conventions, reuse guidance, public interfaces and extension points, and 
includes up-to-date Mermaid diagrams where visual context matters, do not add a 
documentation task. When coverage is outdated, incorrect, ambiguous, or hard to 
find, create a single-line checkbox item that proposes the smallest corrective 
edit to the specific file under ./docs, such as tightening wording, refreshing 
a diagram, or adding cross-links and an index in ./docs/README.md. Only when no 
adequate document exists should a single-line item propose adding a new 
Markdown file under a precise path like 
./docs/architecture/module-boundaries.md; avoid duplicating content and prefer 
updating the most authoritative document.

Each item’s DoD summary inside the single line must commit to test-driven 
development with a failing test first where applicable, no coverage regression 
and changed lines/branches exercised, deterministic tests runnable locally and 
in CI, all quality gates green (build reproducibility, static analysis, type 
checks, formatting, linting, security scanning, secret detection), preserved 
backward compatibility for public interfaces or an explicit migration plan with 
tests and docs for approved breaking changes, idempotent and verified data 
migrations when relevant, updated user/developer/operational docs and changelog 
in the same change, at least one completed peer review with comments resolved 
or explicitly deferred with rationale and a follow-up issue URL, and a clear 
rollback note.

File handling is append-only to FUTURE_CHECKLIST.md. Open FUTURE_CHECKLIST.md 
in append mode when it exists, do not rewrite or reorder existing content, and 
ensure a single trailing blank line before new content. Append a new dated 
section heading at the very end in the exact format “## Review YYYY-MM-DD” 
followed by the new single-line checkbox items. If a section for the same date 
already exists at the end of the file, append additional items under that 
existing section instead of creating a duplicate heading. If 
FUTURE_CHECKLIST.md does not exist, create it and write the heading followed by 
the single-line items. Never modify or regenerate prior content in 
FUTURE_CHECKLIST.md or FEATURE_CHECKLIST.md.

Independence and minimality are mandatory. Each item must describe a single 
smallest change in one place and be implementable without knowledge of any 
other item. If a change requires an Architectural Decision Record, add a 
separate single-line item that lands the ADR under ./docs/adr before any 
implementation item. For API changes, add a separate single-line item that 
updates the OpenAPI specification and contract tests before implementation. For 
diagram or documentation drift, add a dedicated single-line item that updates 
Markdown Mermaid diagrams and related docs to match the current or intended 
design.

Security and privacy findings are reported as normal single-line items and 
never remediated in this review. Identify exposed secrets, unsafe logging of 
sensitive data, missing encryption in transit or at rest, unpinned or 
vulnerable dependencies, missing SBOM updates, absent correlation or trace 
identifiers, missing idempotency on external-facing writes, and permissive IAM; 
propose the smallest verifiable change as a one-line task with clear 
verification and rollback notes.

The deliverable from this rule is only the curated, deduplicated 
FUTURE_CHECKLIST.md containing ready-to-execute single-line checklist items. No 
issues are opened, no branches created, and no commits pushed as part of this 
review.
